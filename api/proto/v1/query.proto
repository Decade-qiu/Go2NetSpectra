syntax = "proto3";

package v1;

option go_package = "api/gen/v1";

import "google/protobuf/timestamp.proto";

// --- Aggregation Query ---

message AggregationRequest {
  google.protobuf.Timestamp end_time = 1;
  string task_name = 2;
  // Optional filters
  string src_ip = 3;
  string dst_ip = 4;
  uint32 src_port = 5;
  uint32 dst_port = 6;
  uint32 protocol = 7;
}

message TaskSummary {
  string task_name = 1;
  uint64 total_bytes = 2;
  uint64 total_packets = 3;
  uint64 flow_count = 4;
}

message QueryTotalCountsResponse {
  repeated TaskSummary summaries = 1;
}


// --- Flow Tracing Query ---

message TraceFlowRequest {
  string task_name = 1;
  map<string, string> flow_keys = 2; // e.g., {"SrcIP": "192.168.1.104", "DstPort": "443"}
  google.protobuf.Timestamp end_time = 3;
}

message FlowLifecycle {
  google.protobuf.Timestamp first_seen = 1;
  google.protobuf.Timestamp last_seen = 2;
  uint64 total_packets = 3;
  uint64 total_bytes = 4;
}

message TraceFlowResponse {
  FlowLifecycle lifecycle = 1;
}

// --- Health Check ---

message HealthCheckRequest {}

message HealthCheckResponse {
  string status = 1; // e.g. "ok"
}

// --- Task Search ---

message SearchTasksRequest {}

message SearchTasksResponse {
  repeated string task_names = 1;
}

// --- Query Service Definition ---

service QueryService {
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
  rpc SearchTasks(SearchTasksRequest) returns (SearchTasksResponse);
  rpc AggregateFlows(AggregationRequest) returns (QueryTotalCountsResponse);
  rpc TraceFlow(TraceFlowRequest) returns (TraceFlowResponse);
}